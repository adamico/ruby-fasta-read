#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'fasta_read.rb'
require 'fileutils'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |assembly, chromosome, cstart, cend|
    masked_unmasked = options[:snp] ? ["snp", ".subst"] : ["unmasked", ""]
    debug("About to read #{assembly} #{masked_unmasked[0]} chr#{chromosome}:#{cstart}-#{cend}")
    path = "fasta/#{assembly}/#{masked_unmasked[0]}/chr#{chromosome + masked_unmasked[1]}.fa"
    if Dir.exist?("fasta/#{assembly}")
      if File.exist?(path)
        puts IO.read(path, cend.to_i - cstart.to_i, cstart.to_i)
        info "correct execution"
      else
        exit_now_with!("chromosome", chromosome)
      end
    else
      exit_now_with!("assembly", assembly)
    end
  end

  def self.exit_now_with!(argument, value)
    exit_now!(1, "the '#{value}' #{argument} doesn't exist in directory structure")
  end

  # supplemental methods here

  # Declare command-line interface here

  description "Extract DNA Fasta sequence from assembly files."
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  on "-o OUTPUTFILE", "--output", "outputs sequence to a file"
  on "--snp", "return the sequence from the SNP-masked assembly"
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  arg :assembly,   "assembly name (hg19, mm10, etc.)"
  arg :chromosome, "id of chromosome (1-22 or X/Y)"
  arg :cstart,     "start coordinate (inclusive) within the chromosome"
  arg :cend,       "end coordinate within the chromosome"
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version FastaRead::VERSION

  use_log_level_option

  go!
end
